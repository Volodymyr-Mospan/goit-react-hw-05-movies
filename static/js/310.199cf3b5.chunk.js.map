{"version":3,"file":"static/js/310.199cf3b5.chunk.js","mappings":"uPAEaA,E,OAAeC,QAAAA,GAAH,iH,kBCKnBC,EAAM,IAAIC,EAAAA,EAmEhB,EAjEe,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,WAAS,kCAAMF,EAAaG,IAAI,gBAAvB,QAAmC,EAAnC,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BH,EAAAA,EAAAA,UAAS,MAArC,eAAOI,EAAP,KAAeC,EAAf,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQb,EAAaG,IAAI,SACzBW,EAAkB,IAAIC,gBAC5B,GAAKF,EASL,OAPAR,EAASQ,GACTJ,GAAa,GACbZ,EACGmB,SAASH,EAAOC,GAChBG,MAAK,SAAAC,GAAM,OAAIX,EAAUW,EAAd,IACXD,MAAK,kBAAMR,GAAa,EAAnB,IAED,WACLK,EAAgBK,OACjB,CACF,GAAE,CAACnB,IAaJ,OACE,UAAC,KAAD,YACE,kBAAMoB,SATW,SAAAC,GACnBA,EAAEC,iBAGFrB,EAF6B,KAAVG,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAGhD,EAIG,WACE,kBAAOmB,KAAK,OAAOC,MAAOpB,EAAOqB,SAdjB,SAAAJ,GACpBhB,EAASgB,EAAEK,cAAcF,MAC1B,KAaK,0CAGDhB,IAAa,SAACmB,EAAA,EAAD,KAEZnB,GAAaF,IACb,wBACGA,EAAOsB,KAAI,SAAAC,GAAU,IAAD,EACnB,OACE,SAAClC,EAAD,WACE,UAAC,KAAD,CAASmC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMvB,GAAnD,oBACGmB,EAAMK,aADT,QACkBL,EAAMM,KADxB,KAEGC,OAAOC,SAASR,EAAMS,eAAiB,UAF1C,QADiBT,EAAME,GAO5B,OAIHvB,KAAcF,IAAUA,EAAOiC,SAAmB,2CAGzD,C,yHCrEDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IACMC,EAAS,CACbC,QAFc,oCAKH5C,EAAb,qHACE,WAAkBgB,GAAlB,gGAE2B0B,EAAAA,EAAAA,IAAU,qBAAsB,CACrDG,OAAQ7B,EAAgB6B,OACxBF,OAAAA,IAJN,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,mCASuB,iBAAf,KAAMC,KATd,mDAUIC,QAAQC,MAAR,MAVJ,yDADF,gHAeE,WAAe7C,EAAOU,GAAtB,gGAE2B0B,EAAAA,EAAAA,IAAU,eAAgB,CAC/CG,OAAQ7B,EAAgB6B,OACxBF,QAAO,kBACFA,GADC,IAEJrC,MAAAA,MANR,cAEUwC,EAFV,yBAUWA,EAASC,KAAKC,SAVzB,mCAYuB,iBAAf,KAAMC,KAZd,mDAaIC,QAAQC,MAAR,MAbJ,yDAfF,yHAgCE,WAAsBC,EAAcpC,GAApC,uFACyB0B,EAAAA,EAAAA,IAAUU,EAAc,CAC7CP,OAAQ7B,EAAgB6B,OACxBF,OAAAA,IAHJ,cACQG,EADR,yBAMSA,EAASC,MANlB,2CAhCF,+D","sources":["pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilmListItem = styled.li`\n  padding: 5px;\n\n  &:nth-child(odd) {\n    background-color: rgb(255, 231, 203);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { NavLink, useLocation, useSearchParams } from 'react-router-dom';\nimport { FetchApi } from 'services/api';\nimport { Container } from 'components/GlobalStyle';\nimport { FilmListItem } from 'pages/Movies/Movies.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst api = new FetchApi();\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(() => searchParams.get('query') ?? '');\n  const [movies, setMovies] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const qeury = searchParams.get('query');\n    const abortController = new AbortController();\n    if (!qeury) return;\n\n    setQuery(qeury);\n    setIsLoading(true);\n    api\n      .getMovie(qeury, abortController)\n      .then(result => setMovies(result))\n      .then(() => setIsLoading(false));\n\n    return () => {\n      abortController.abort();\n    };\n  }, [searchParams]);\n\n  const heandleChange = e => {\n    setQuery(e.currentTarget.value);\n  };\n\n  const heandlSubmit = e => {\n    e.preventDefault();\n    const nextParams = query !== '' ? { query } : {};\n\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <Container>\n      <form onSubmit={heandlSubmit}>\n        <input type=\"text\" value={query} onChange={heandleChange} />\n        <button>Search</button>\n      </form>\n\n      {isLoading && <Loader />}\n\n      {!isLoading && movies && (\n        <ul>\n          {movies.map(movie => {\n            return (\n              <FilmListItem key={movie.id}>\n                <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.title ?? movie.name} (\n                  {Number.parseInt(movie.release_date) || 'no date'})\n                </NavLink>\n              </FilmListItem>\n            );\n          })}\n        </ul>\n      )}\n\n      {!isLoading && (movies ? !movies.length : false) && <p>Nothing found</p>}\n    </Container>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'ee11dca6bb556f59ebf7af76deb30565';\nconst params = {\n  api_key: API_KEY,\n};\n\nexport class FetchApi {\n  async getTrending(abortController) {\n    try {\n      const response = await axios.get('trending/movie/day', {\n        signal: abortController.signal,\n        params,\n      });\n\n      return response.data.results;\n    } catch (error) {\n      if (error.code === 'ERR_CANCELED') return;\n      console.error(error);\n    }\n  }\n\n  async getMovie(query, abortController) {\n    try {\n      const response = await axios.get('search/movie', {\n        signal: abortController.signal,\n        params: {\n          ...params,\n          query,\n        },\n      });\n\n      return response.data.results;\n    } catch (error) {\n      if (error.code === 'ERR_CANCELED') return;\n      console.error(error);\n    }\n  }\n\n  async getMovieDetails(movieDetails, abortController) {\n    const response = await axios.get(movieDetails, {\n      signal: abortController.signal,\n      params,\n    });\n\n    return response.data;\n  }\n}\n"],"names":["FilmListItem","styled","api","FetchApi","useSearchParams","searchParams","setSearchParams","useState","get","query","setQuery","movies","setMovies","isLoading","setIsLoading","location","useLocation","useEffect","qeury","abortController","AbortController","getMovie","then","result","abort","onSubmit","e","preventDefault","type","value","onChange","currentTarget","Loader","map","movie","to","id","state","from","title","name","Number","parseInt","release_date","length","axios","params","api_key","signal","response","data","results","code","console","error","movieDetails"],"sourceRoot":""}