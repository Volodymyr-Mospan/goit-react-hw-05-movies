{"version":3,"file":"static/js/33.37cab16a.chunk.js","mappings":"oRAGaA,EAAUC,EAAAA,QAAAA,QAAH,8IAUPC,EAAgBD,EAAAA,QAAAA,IAAH,sBAEbE,GAAOF,EAAAA,EAAAA,SAAOG,EAAAA,GAAPH,CAAH,+M,kBCJXI,EAAM,IAAIC,EAAAA,EAyFhB,EAvFqB,WAAO,IAAD,IA+Bf,IA9BFC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,qBADDC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACMC,QAAQC,aAApB,aAAG,EAAwBC,YAA3B,QAAmC,UAyBrD,IAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBADd,wCAGd,6GAEyBjB,EAAIkB,gBAAJ,gBACVhB,GACTc,GAJN,OAEUG,EAFV,OAMIb,EAAQa,GANZ,mDAQuB,iBAAf,KAAMC,KARd,mDASIC,QAAQC,MAAR,MACAf,EAAS,WAAY,CAAEgB,SAAS,IAVpC,0DAHc,sBAkBd,OAlBc,mCAgBdC,GAEO,WACLR,EAAgBS,OACjB,CACF,GAAE,CAACvB,EAASK,IAETF,EACF,OACE,UAAC,KAAD,YACE,UAACV,EAAD,YACE,UAACE,EAAD,YACE,SAACC,EAAD,CAAM4B,GAAIjB,EAAV,4BACA,gBACEkB,IAAG,yCAAoCtB,EAAKuB,aAC5CC,IAAG,8BAAexB,EAAKyB,aAApB,QAA6BzB,EAAK0B,MACrCC,MAAM,YAIV,UAACnC,EAAD,YACE,oCACGQ,EAAKyB,aADR,QACiBzB,EAAK0B,OACjB1B,EAAK4B,cAAP,YACMC,OAAOC,SAAS9B,EAAK4B,cAD3B,SAGH,wCAAgBG,KAAKC,MAA0B,GAApBhC,EAAKiC,cAAhC,SAEGjC,EAAKkC,WACN,4BACE,sCACA,uBAAIlC,EAAKkC,gBAGVlC,EAAKmC,OAAOC,SACb,4BACE,mCACCpC,EAAKmC,OAAOE,KAAI,SAAAC,GAAK,OACpB,4BAAsBA,EAAMZ,KAA5B,MAAWY,EAAMC,GADG,cAO9B,gCACE,oDACA,2BACE,yBACE,SAAC9C,EAAD,CAAM4B,GAAG,OAAT,qBAEF,yBACE,SAAC5B,EAAD,CAAM4B,GAAG,UAAT,8BAIN,8BACE,SAAC,KAAD,QAKT,C,yHC/FDmB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IACMC,EAAS,CACbC,QAFc,oCAKH9C,EAAb,qHACE,WAAkBe,GAAlB,gGAE2B6B,EAAAA,EAAAA,IAAU,qBAAsB,CACrDG,OAAQhC,EAAgBgC,OACxBF,OAAAA,IAJN,cAEUG,EAFV,yBAOWA,EAASC,KAAKC,SAPzB,mCASuB,iBAAf,KAAM/B,KATd,mDAUIC,QAAQC,MAAR,MAVJ,yDADF,gHAeE,WAAe8B,EAAOpC,GAAtB,gGAE2B6B,EAAAA,EAAAA,IAAU,eAAgB,CAC/CG,OAAQhC,EAAgBgC,OACxBF,QAAO,kBACFA,GADC,IAEJM,MAAAA,MANR,cAEUH,EAFV,yBAUWA,EAASC,KAAKC,SAVzB,mCAYuB,iBAAf,KAAM/B,KAZd,mDAaIC,QAAQC,MAAR,MAbJ,yDAfF,yHAgCE,WAAsB+B,EAAcrC,GAApC,uFACyB6B,EAAAA,EAAAA,IAAUQ,EAAc,CAC7CL,OAAQhC,EAAgBgC,OACxBF,OAAAA,IAHJ,cACQG,EADR,yBAMSA,EAASC,MANlB,2CAhCF,+D","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.section`\n  display: flex;\n  gap: 45px;\n\n  padding-top: 45px;\n  padding-bottom: 45px;\n\n  border-bottom: 1px solid black;\n`;\n\nexport const FlexComponent = styled.div``;\n\nexport const Link = styled(NavLink)`\n  display: block;\n  width: 100px;\n\n  margin-bottom: 20px;\n  border: 1px solid black;\n  border-radius: 4px;\n\n  text-align: center;\n  text-decoration: none;\n\n  color: black;\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport { useParams, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { Container } from 'components/GlobalStyle';\nimport {\n  Section,\n  FlexComponent,\n  Link,\n} from 'pages/MovieDetails/MovieDetails.styled';\n\nimport { FetchApi } from 'services/api';\n\nconst api = new FetchApi();\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [film, setFilm] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useRef(useLocation());\n  const backLinkHref = location.current.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function fetchMovieDetails() {\n      try {\n        const result = await api.getMovieDetails(\n          `movie/${movieId}`,\n          abortController\n        );\n        setFilm(result);\n      } catch (error) {\n        if (error.code === 'ERR_CANCELED') return;\n        console.error(error);\n        navigate('/noFound', { replace: true });\n      }\n    }\n    fetchMovieDetails();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId, navigate]);\n\n  if (film) {\n    return (\n      <Container>\n        <Section>\n          <FlexComponent>\n            <Link to={backLinkHref}>&larr; return</Link>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n              alt={`Poster of ${film.title ?? film.name}`}\n              width=\"200\"\n            />\n          </FlexComponent>\n\n          <FlexComponent>\n            <h2>\n              {film.title ?? film.name}\n              {!!film.release_date &&\n                ` (${Number.parseInt(film.release_date)})`}\n            </h2>\n            <p>User Score: {Math.floor(film.vote_average * 10)}%</p>\n\n            {!!film.overview && (\n              <div>\n                <h3>Overview</h3>\n                <p>{film.overview}</p>\n              </div>\n            )}\n            {!!film.genres.length && (\n              <div>\n                <h3>Genres</h3>\n                {film.genres.map(genre => (\n                  <span key={genre.id}>{genre.name} </span>\n                ))}\n              </div>\n            )}\n          </FlexComponent>\n        </Section>\n        <section>\n          <h2>Additional infotmation</h2>\n          <ul>\n            <li>\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </ul>\n        </section>\n        <section>\n          <Outlet></Outlet>\n        </section>\n      </Container>\n    );\n  }\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'ee11dca6bb556f59ebf7af76deb30565';\nconst params = {\n  api_key: API_KEY,\n};\n\nexport class FetchApi {\n  async getTrending(abortController) {\n    try {\n      const response = await axios.get('trending/movie/day', {\n        signal: abortController.signal,\n        params,\n      });\n\n      return response.data.results;\n    } catch (error) {\n      if (error.code === 'ERR_CANCELED') return;\n      console.error(error);\n    }\n  }\n\n  async getMovie(query, abortController) {\n    try {\n      const response = await axios.get('search/movie', {\n        signal: abortController.signal,\n        params: {\n          ...params,\n          query,\n        },\n      });\n\n      return response.data.results;\n    } catch (error) {\n      if (error.code === 'ERR_CANCELED') return;\n      console.error(error);\n    }\n  }\n\n  async getMovieDetails(movieDetails, abortController) {\n    const response = await axios.get(movieDetails, {\n      signal: abortController.signal,\n      params,\n    });\n\n    return response.data;\n  }\n}\n"],"names":["Section","styled","FlexComponent","Link","NavLink","api","FetchApi","movieId","useParams","useState","film","setFilm","navigate","useNavigate","backLinkHref","useRef","useLocation","current","state","from","useEffect","abortController","AbortController","getMovieDetails","result","code","console","error","replace","fetchMovieDetails","abort","to","src","poster_path","alt","title","name","width","release_date","Number","parseInt","Math","floor","vote_average","overview","genres","length","map","genre","id","axios","params","api_key","signal","response","data","results","query","movieDetails"],"sourceRoot":""}